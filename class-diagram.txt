@startuml

class ApplicationLayer.GraphicInterfaceManager {
	{field} -logged : boolean
	{field} -sc : java.util.Scanner
	{field} -startMenu : boolean
	{method} -clientMenu () : void
	{method} +loginAccount () : void
	{method} +registerAccount () : void
	{method} +startMenu () : void
}


class DomainModel.Customer {
	{field} +email : String
	{field} -id : int
	{field} +isPremium : int
	{field} -name : String
	{field} -password : String
	{field} +points : int
	{field} -surname : String
	{field} +telephoneNumber : int
}


class DomainModel.Court {
	{field} -id : int
	{field} -price : float
	{field} -terrain_type : String
	{field} +type : String
	{method} +printAllCourt ( paramFormatter1 : java.util.Formatter , paramboolean2 : boolean ) : void
}


class DomainModel.RentingKit {
	{field} -id : int
	{field} +numOfRents : int
	{field} -type : String
	{field} -unitPrice : float
	{method} +getTotPrice () : float
}


class DomainModel.Reservation {
	{field} +date : java.sql.Date
	{field} -id : int
	{field} +isPremium : int
	{field} +price : float
}


class DomainModel.TimeSlot {
	{field} ~finish_hour : String
	{field} ~start_hour : String
	{field} ~ts : int
	{method} +printAllTimeSlots ( paramFormatter1 : java.util.Formatter ) : void
}


class DomainModel.Wallet {
	{field} -balance : float
	{field} -id : int
	{method} +addMoney ( paramfloat1 : float ) : void
	{method} +removeMoney ( paramfloat1 : float ) : boolean
}


interface DAOs.CustomerDao {
	{method}  {abstract} +deleteTestClient ( paramString1 : String ) : void
	{method}  {abstract} +getClient ( paramString1 : String , paramString2 : String ) : DomainModel.Customer
	{method}  {abstract} +getPremiumExpiration ( paramClient1 : DomainModel.Customer ) : java.sql.Date
	{method}  {abstract} +insertClient ( paramClient1 : DomainModel.Customer ) : int
	{method}  {abstract} +modifyPremium ( paramClient1 : DomainModel.Customer ) : boolean
	{method}  {abstract} +modifyPremiumExpiration ( paramClient1 : DomainModel.Customer ) : boolean
	{method}  {abstract} +updatePoints ( paramint1 : int , paramClient2 : DomainModel.Customer , paramStatement3 : java.sql.Statement ) : void
}


class DAOs.CustomerDaoImpl {
	{field} -db : DAOs.DatabaseManager
	{method} +deleteTestClient ( paramString1 : String ) : void
	{method} +getClient ( paramString1 : String , paramString2 : String ) : DomainModel.Customer
	{method} +getPremiumExpiration ( paramClient1 : DomainModel.Customer ) : java.sql.Date
	{method} +insertClient ( paramClient1 : DomainModel.Customer ) : int
	{method} +modifyPremium ( paramClient1 : DomainModel.Customer ) : boolean
	{method} +modifyPremiumExpiration ( paramClient1 : DomainModel.Customer ) : boolean
	{method} +updatePoints ( paramint1 : int , paramClient2 : DomainModel.Customer , paramStatement3 : java.sql.Statement ) : void
}


interface DAOs.CourtDao {
	{method}  {abstract} +getCourt () : java.util.List
}


class DAOs.CourtDaoImpl {
	{field} -db : DAOs.DatabaseManager
	{method} +getCourt () : java.util.List
}


interface DAOs.RentingKitDao {
	{method}  {abstract} +getRentingKit ( paramString1 : String ) : DomainModel.RentingKit
}


class DAOs.RentingKitDaoImpl {
	{field} -db : DAOs.DatabaseManager
	{method} +getRentingKit ( paramString1 : String ) : DomainModel.RentingKit
}


interface DAOs.ReservationDao {
	{method}  {abstract} +checkTestReservation ( paramClient1 : DomainModel.Customer , paramDate2 : java.sql.Date ) : boolean
	{method}  {abstract} +deleteReservation ( paramReservation1 : DomainModel.Reservation , paramClient2 : DomainModel.Customer ) : boolean
	{method}  {abstract} +getReservationById ( paramint1 : int ) : DomainModel.Reservation
	{method}  {abstract} +getReservationsId ( paramint1 : int ) : java.util.ArrayList
	{method}  {abstract} +makeReservation ( paramReservation1 : DomainModel.Reservation , paramboolean2 : boolean , paramboolean3 : boolean ) : boolean
	{method}  {abstract} +printAllFutureReservations ( paramint1 : int ) : void
	{method}  {abstract} +printAllReservations ( paramint1 : int ) : void
}


class DAOs.ReservationDaoImpl {
	{field} -db : DAOs.DatabaseManager
	{method} +checkTestReservation ( paramClient1 : DomainModel.Customer , paramDate2 : java.sql.Date ) : boolean
	{method} +deleteReservation ( paramReservation1 : DomainModel.Reservation , paramClient2 : DomainModel.Customer ) : boolean
	{method} +getReservationById ( paramint1 : int ) : DomainModel.Reservation
	{method} +getReservationsId ( paramint1 : int ) : java.util.ArrayList
	{method} +makeReservation ( paramReservation1 : DomainModel.Reservation , paramboolean2 : boolean , paramboolean3 : boolean ) : boolean
	{method} +printAllFutureReservations ( paramint1 : int ) : void
	{method} +printAllReservations ( paramint1 : int ) : void
}


interface DAOs.TimeSlotDao {
	{method}  {abstract} +getTimeSlots ( paramDate1 : java.sql.Date , paramint2 : int ) : java.util.List
}


class DAOs.TimeSlotDaoImpl {
	{field} -db : DAOs.DatabaseManager
	{method} +getTimeSlots ( paramDate1 : java.sql.Date , paramint2 : int ) : java.util.List
}


interface DAOs.WalletDao {
	{method}  {abstract} +getWallet ( paramint1 : int , paramStatement2 : java.sql.Statement ) : DomainModel.Wallet
	{method}  {abstract} +modifyBalance ( paramClient1 : DomainModel.Customer , paramStatement2 : java.sql.Statement ) : boolean
}


class DAOs.WalletDaoImpl {
	{field} -db : DAOs.DatabaseManager
	{method} +getWallet ( paramint1 : int , paramStatement2 : java.sql.Statement ) : DomainModel.Wallet
	{method} +modifyBalance ( paramClient1 : DomainModel.Customer , paramStatement2 : java.sql.Statement ) : boolean
}


class BusinessLogic.AccountManager {
	{method}  {static} +getDateTimeUTC () : String
	{method}  {static} +isValidEmail ( paramString1 : String ) : boolean
	{method}  {static} +renewPremium ( paramClient1 : DomainModel.Customer ) : boolean
	{method}  {static} +sendEmail ( paramString1 : String , paramString2 : String , paramString3 : String ) : void
	{method}  {static} +setIsPremium ( paramClient1 : DomainModel.Customer ) : boolean
	{method}  {static} +showPremiumExpiration ( paramClient1 : DomainModel.Customer ) : void
	{method}  {static} +updateClient ( paramClient1 : DomainModel.Customer ) : DomainModel.Customer
}


class BusinessLogic.GeneralLogging {
	{field} -FILENAME : String
	{field} -fh : java.util.logging.FileHandler
	{field} -file : java.io.File
	{field} ~format : java.text.SimpleDateFormat
	{field} -logger : java.util.logging.Logger
	{method} +log ( paramException1 : Exception ) : void
}


class BusinessLogic.MailManager {
	{field} {static} +pass : String
	{field} {static} +sender : String
	{method} +createAndSendEmailMessage ( paramString1 : String , paramString2 : String , paramString3 : String ) : boolean
	{method} -sendEmailMessage ( paramMailManager$Email1 : BusinessLogic.MailManager$Email ) : void
}


class BusinessLogic.PremiumCustomerReservationManager {
	{field} -discount : float
	{method} +makeReservation ( paramReservation1 : DomainModel.Reservation ) : boolean
}


abstract class BusinessLogic.CustomerReservationManager {
	{field} #giftPoints : int
	{field} #reservationPoints : int
	{method} +deleteReservation ( paramReservation1 : DomainModel.Reservation , paramClient2 : DomainModel.Customer ) : boolean
	{method} +getCourt ( paramFormatter1 : java.util.Formatter , paramboolean2 : boolean ) : java.util.List
	{method} +getRentingKit ( paramString1 : String ) : DomainModel.RentingKit
	{method} +getReservationById ( paramint1 : int ) : DomainModel.Reservation
	{method} +getReservationsId ( paramClient1 : DomainModel.Customer ) : java.util.ArrayList
	{method} +getTimeSlots ( paramFormatter1 : java.util.Formatter , paramDate2 : java.sql.Date , paramint3 : int ) : java.util.List
	{method}  {abstract} +makeReservation ( paramReservation1 : DomainModel.Reservation ) : boolean
	{method} #makeReservation ( paramReservation1 : DomainModel.Reservation , paramfloat2 : float , paramboolean3 : boolean ) : boolean
	{method} +printAllFutureReservations ( paramClient1 : DomainModel.Customer ) : void
	{method} +printAllReservations ( paramClient1 : DomainModel.Customer ) : void
}


class BusinessLogic.StandardCustomerReservationManager {
	{method} +makeReservation ( paramReservation1 : DomainModel.Reservation ) : boolean
}


class BusinessLogic.WalletManager {
	{method} +getWalletBalance ( paramClient1 : DomainModel.Customer ) : float
	{method} +topUpWallet ( paramfloat1 : float , paramClient2 : DomainModel.Customer ) : boolean
	{method} +withdrawalWallet ( paramfloat1 : float , paramClient2 : DomainModel.Customer ) : boolean
}




ApplicationLayer.GraphicInterfaceManager *--  DAOs.CustomerDaoImpl : clientDao
ApplicationLayer.GraphicInterfaceManager *--  BusinessLogic.WalletManager : walletManager
ApplicationLayer.GraphicInterfaceManager -->  DomainModel.Customer : customer
DomainModel.Customer -->  DomainModel.Wallet : wallet
DomainModel.Customer -->  BusinessLogic.CustomerReservationManager : customerReservationManager
DomainModel.Reservation -->  DomainModel.Customer : customer
DomainModel.Reservation -->  DomainModel.Court : court
DomainModel.Reservation -->  DomainModel.RentingKit : rentingKit
DomainModel.Reservation -->  DomainModel.TimeSlot : time_slot
DAOs.CustomerDaoImpl ..|>  DAOs.CustomerDao
DAOs.CourtDaoImpl ..|>  DAOs.CourtDao
DAOs.RentingKitDaoImpl ..|>  DAOs.RentingKitDao
DAOs.ReservationDaoImpl ..|>  DAOs.ReservationDao
DAOs.TimeSlotDaoImpl ..|>  DAOs.TimeSlotDao
DAOs.WalletDaoImpl ..|>  DAOs.WalletDao
BusinessLogic.AccountManager *--  DAOs.CustomerDaoImpl : clientDao
BusinessLogic.AccountManager *--  BusinessLogic.WalletManager : walletManager
BusinessLogic.PremiumCustomerReservationManager --|>  BusinessLogic.CustomerReservationManager
BusinessLogic.CustomerReservationManager *--  DAOs.CourtDaoImpl : courtDao
BusinessLogic.CustomerReservationManager *--  DAOs.RentingKitDaoImpl : rentingKitDao
BusinessLogic.CustomerReservationManager *--  DAOs.ReservationDaoImpl : reservationDao
BusinessLogic.CustomerReservationManager *--  DAOs.TimeSlotDaoImpl : timeSlotDao
BusinessLogic.CustomerReservationManager *--  BusinessLogic.WalletManager : walletManager
BusinessLogic.StandardCustomerReservationManager --|>  BusinessLogic.CustomerReservationManager
BusinessLogic.WalletManager *--  DAOs.WalletDaoImpl : walletDao

@enduml